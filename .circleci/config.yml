version: 2.1
# Define CircleCIâ€™s Reusable Configuration features
orbs:
  docker: circleci/docker@2.1.2
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

# Install all necessary dependencies for the jobs
commands:
  # Download AWS Command Line Interface (AWS CLI), gettext-base 
  download-awscli-gettext:
    description: To download AWS Command Line Interface (AWS CLI), gettext-base 
    steps:
      - run:
          name: Downloading AWS Command Line Interface, gettext-base
          command: |
            sudo apt update
            sudo apt-get install awscli
            sudo apt-get install gettext-base

  # Dowload aws-iam-authenticator binary
  download-aws-iam-authenticator-binary:
    description: To download aws-iam-authenticator binary
    steps:
      - run:
          name: Dowloading aws-iam-authenticator binary
          command: |
            # Using curl to download the aws-iam-authenticator binary via the specified URL
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator \
            https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator

            # Grant download permission
            chmod +x ./aws-iam-authenticator

            # Move installed aws-iam-authenticator to folder /usr/local/bin
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator

  # Download Kubernetes command-line tool (kubectl)
  download-kubectl:
    description: To download Kubernetes command-line tool (kubectl)
    steps:
      - run:
          name: Downloading Kubernetes command-line tool (kubectl)
          command: |
            # Using curl to download the aws-iam-authenticator binary via the specified URL
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl

            # Grant download permission
            chmod +x ./kubectl

            # Move installed kubectl to folder /usr/local/bin
            sudo mv ./kubectl /usr/local/bin/kubectl

# List of jobs
jobs:
  # 1: Running linting
  run-lint:
    docker:
      - image: cimg/python:3.7.13
    steps:
      # Restore cached dependencies based on the checksum of "app/requirements.txt" and save under the value v1-dependencies-{{ checksum "app/requirements.txt" }}
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            # To fall back if no maching
            - v1-dependencies-
      # Download dependencies using step install in Makefile
      - run:
          name: Downloading dependencies
          command: |
            chmod -R +x ./bin/
            python3 -m venv .env
            source .env/bin/activate
            make install
      # Save cached dependencies based on the checksum of "app/requirements.txt" and save under the value v1-dependencies-{{ checksum "app/requirements.txt" }}
      - save_cache:
          paths:
            - ./.env
          key: v1-dependencies-{{ checksum "app/requirements.txt" }}
      - run:
          name: Run lint
          command: |
            source .env/bin/activate
            make lint

  # 2: Building and pushing Docker image to Docker Hub
  building-and-pushing-image-to-docker-hub:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Building and pushing Docker image to Docker hub
          command: |
            # Get the version number from file "app/version.txt"
            export VERSION=$(<app/version.txt)

            # Building Docker image capstone-flask-app
            docker build -t capstone-flask-app app

            # Creating tags for the Docker image: latest for the latest version, VERSION for the current app version
            docker tag capstone-flask-app ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            docker tag capstone-flask-app ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:lastest

            # Login Docker hub with personal credentials
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD

            # Push image to Docker hub
            docker push ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            docker push ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:lastest

  # 3: Deploying the green version
  deploying-green-version:
    docker:
      - image: cimg/python:3.7.13
    steps:
      - checkout
      - download-awscli-gettext
      - download-aws-iam-authenticator-binary
      - download-kubectl
      - run:
          name: Connecting to cluster
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
      - run:
          name: Deploying new version (as green)
          command: |
            # Get the version from file "app/version.txt"
            export VERSION=$(<app/version.txt)

            # Get the Docker Hub ID from CircleCI environment variable "DOCKER_HUB_ID"
            export DOCKER_IMAGE=${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}

            # Get the version from file "app/version.txt"
            export LABEL_VERSION=${VERSION/./-}

            # Print LABEL_VERSION
            echo "LABEL_VERSION: $LABEL_VERSION"

            # Print CircleCI environment variables
            echo "DOCKER_IMAGE: $DOCKER_IMAGE"
            echo "DOCKER_HUB_ID: $DOCKER_HUB_ID"
            echo "DOCKER_REPOSITORY: $DOCKER_REPOSITORY"

            # Passing CircleCI environment variables to the k8s/deployment.yaml file
            envsubst < k8s/deployment.yaml | kubectl apply --filename -

            # Passing CircleCI environment variables to the k8s/deployment.yaml file green version
            envsubst < k8s/service-green.yaml | kubectl apply --filename -

            # Delaying for 5 seconds and check for Load Balancer's host name
            sleep 5
            LOAD_BALANCER=$(kubectl get services \
            capstone-flask-app-green \
            --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')

            # Print the hostname of the load balancer to the console.
            echo "LOAD_BALANCER: $LOAD_BALANCER"
            

  # 4: Setting up a manual approval
  getting-manual-approval:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - run: echo "Waiting for user approval to make new deploy as new blue version"

  # 5: Deploying the new blue version
  deploying-new-blue-version:
    docker:
      - image: cimg/python:3.7.13
    steps:
      - checkout
      - download-awscli-gettext
      - download-aws-iam-authenticator-binary
      - download-kubectl
      - run:
          name: Connecting to cluster
          command: |
            # Connecting to already created cluster
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
      - run:
          name: Pointing new version as new blue deploy
          command: |
            # Get the version from file "app/version.txt"
            export VERSION=$(<app/version.txt)
            export LABEL_VERSION=${VERSION/./-}

            # Passing CircleCI environment variables to the k8s/deployment.yaml file
            envsubst < k8s/service.yaml | kubectl apply --filename -
            
            # Get pod
            POD=$(kubectl get pod)
            echo "POD: $_POD"
            
            # Get services
            SERVICE=$(kubectl get service)
            echo "SERVICE: $SERVICE"

  # 6: Removing the old version (blue version)
  removing-old-blue-version:
    docker:
      - image: cimg/python:3.7.13
    steps:
      - checkout
      - download-awscli-gettext
      - download-aws-iam-authenticator-binary
      - download-kubectl
      - run:
          name: Connecting to cluster
          command: |
            # Connect to already created cluster
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
      - run:
          name: Removing the old version of capstone-flask-app
          command: |
            # Get the version from file "app/version.txt"
            export VERSION=$(<app/version.txt)
            export LABEL_VERSION=${VERSION/./-}

            # The for loop iterates "kubectl get deployments"
            # If the deployment name is not equal to the expected deployment name with the new label version, deletes it
            for deploy in $(kubectl get deployments -o jsonpath="{.items[*].metadata.name}" | grep capstone-flask-app);
            do
              if [[ $deploy != capstone-flask-app-$LABEL_VERSION ]];
              then
                kubectl delete deployments $deploy
              fi
            done

            # Remove the capstone-flask-app-green service if it exists
            if kubectl get services | grep capstone-flask-app-green;
            then
              kubectl delete services capstone-flask-app-green
            fi

workflows:
  default:
    jobs:
      - run-lint
      - building-and-pushing-image-to-docker-hub:
          requires: [run-lint]
      - deploying-green-version:
          requires: [building-and-pushing-image-to-docker-hub]
      - getting-manual-approval:
          type: approval
          requires: [deploying-green-version]
      - deploying-new-blue-version:
          requires: [getting-manual-approval]
      - removing-old-blue-version:
          requires: [deploying-new-blue-version]
